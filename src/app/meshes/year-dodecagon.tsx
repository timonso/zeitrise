import * as THREE from 'three';
import React, { JSX, use, useMemo, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { DaySquare } from './day-square';
import { SVGCurve } from '../page';
// import monthGridSvg from './curves/month_grid.svg';

useGLTF.preload('./media/meshes/year_dodecagon.glb');
useGLTF.preload('./media/meshes/year_separator.glb');

// Auto-generated by: https://github.com/pmndrs/gltfjsx
type DodecagonMesh = GLTF & {
    nodes: {
        decagon: THREE.Mesh;
    };
    materials: {
        dodecagon: THREE.MeshStandardMaterial;
    };
};

type SeparatorMesh = GLTF & {
    nodes: {
        separator: THREE.Mesh;
    };
    materials: {
        separator: THREE.MeshStandardMaterial;
    };
};

type YearDodecagonMeshProps = JSX.IntrinsicElements['group'] & {
    // selected: boolean;
    // hovered: boolean;
};

export function YearDodecagonMesh(props: YearDodecagonMeshProps) {
    const { nodes, materials } = useGLTF(
        './media/meshes/year_dodecagon.glb'
    ) as unknown as DodecagonMesh;

    const dodecagonMaterial = new THREE.MeshStandardMaterial({
        color: '#777777',
        roughness: 0.5,
        metalness: 0.3,
    });

    return (
        <group {...props} dispose={null}>
            <mesh
                geometry={nodes.decagon.geometry}
                material={dodecagonMaterial}
                position={[0, 1, 0]}
                rotation={[0, 0.262, 0]}
            />
        </group>
    );
}

export function YearSeparatorMesh(props: JSX.IntrinsicElements['group']) {
    const { nodes, materials } = useGLTF(
        './media/meshes/year_separator.glb'
    ) as unknown as SeparatorMesh;

    const separatorMaterial = new THREE.MeshStandardMaterial({
        color: '#777777',
        roughness: 0.5,
        metalness: 0.3,
        side: THREE.DoubleSide,
    });

    return (
        <group {...props} dispose={null}>
            <mesh
                geometry={nodes.separator.geometry}
                material={separatorMaterial}
                position={[0, 0, 0]}
                rotation={[0, 0, 0]}
            />
        </group>
    );
}

export function YearDodecagonSlice({ height = 0 }: { height?: number }) {
    const offset = 0.12;

    const dayElements: JSX.Element[] = [];
    for (let week = 0; week < 5; week++) {
        const lastWeekDays = week > 3 ? 3 : 7;
        for (let day = 0; day < lastWeekDays; day++) {
            const element = (
                <DaySquare
                    key={`day-${day}-week-${week}`}
                    day={day}
                    week={week}
                />
            );
            dayElements.push(element);
        }
    }

    return (
        <>
            <YearDodecagonMesh position={[0, height, 0]} scale={0.5} />

            {height < 9 ? (
                <YearSeparatorMesh
                    position={[0, height, 0]}
                    scale={0.5}
                />
            ) : null}
            {Array.from({ length: 12 }).map((_, i) => {
                const angle = (i * 2 * Math.PI) / 12;
                const distance = 2.43;

                return (
                    <group
                        key={i}
                        position={[0, height + offset, 0]}
                        rotation={[0, angle, 0]}
                    >
                        <group position={[distance, 0, 0]}>
                            <group position={[0, 0, 0.51]}>
                                <SVGCurve
                                    url={'./media/curves/month_grid.svg'}
                                    rotation={[0, Math.PI / 2, 0]}
                                    position={[0, 0, 0]}
                                    scale={1.8}
                                    lineColor={'#888888'}
                                />
                                {dayElements}
                            </group>
                        </group>
                        {/* <axesHelper args={[40]} /> */}
                    </group>
                );
            })}
        </>
    );
}
